/* jshint -W097 */// jshint strict:false
/*jslint node: true */
"use strict";

var express =           require('express');
var socketio =          require('socket.io');
var session;// =           require('express-session');
var cookieParser;// =      require('cookie-parser');
var bodyParser;// =        require('body-parser');
var AdapterStore;// =      require(__dirname + '/../../lib/session.js')(session);
var passportSocketIo;// =  require(__dirname + "/lib/passport.socketio.js");
var password;// =          require(__dirname + '/../../lib/password.js');
var passport;// =          require('passport');
var LocalStrategy;// =     require('passport-local').Strategy;
var flash;// =             require('connect-flash'); // TODO report error to user

var webServer =  null;
var store =      null;
var objects =    {};
var states =     {};
var secret =     'Zgfr56gFe87jJOM'; // Will be generated by first start
var userKey =    'connect.sid';

var isAuthUsed = false;

var adapter = require(__dirname + '/../../lib/adapter.js')({
    name:           'admin',
    install: function (callback) {
        if (typeof callback === 'function') callback();
    },
    objectChange: function (id, obj) {
        objects[id] = obj;

        webServer.io.sockets.emit('objectChange', id, obj);
    },
    stateChange: function (id, state) {
        states[id] = state;
        webServer.io.sockets.emit('stateChange', id, state);
    },
    unload: function (callback) {
        try {
            adapter.log.info("terminating http" + (webServer.settings.secure ? "s" : "") + " server on port " + webServer.settings.port);
            webServer.server.close();

            callback();
        } catch (e) {
            callback();
        }
    },
    ready: function () {
        adapter.getForeignObject("system.adapter.admin", function (err, obj) {
            if (!err && obj) {
                if (!obj.native.secret) {
                    require('crypto').randomBytes(24, function (ex, buf) {
                        secret = buf.toString('hex');
                        adapter.extendForeignObject("system.adapter.admin", {native: {secret: secret}});
                        main();
                    });
                }else {
                    secret = obj.native.secret;
                    main();
                }
            } else {
                adapter.logger.error("Cannot find object system.adapter.admin");
            }
        });
    }
});

function main() {
    adapter.subscribeForeignStates('*');
    adapter.subscribeForeignObjects('*');

    webServer = initWebServer(adapter.config);

    getData();

}

function addUser(user, pw, callback) {
    adapter.getForeignObject("system.user." + user, function (err, obj) {
        if (obj) {
            if (callback) callback("User yet exists");
        } else {
            adapter.setForeignObject('system.user.' + user, {
                type: 'user',
                common: {
                    name:    user,
                    enabled: true,
                    groups:  []
                }
            }, function () {
                adapter.setPassword(user, pw, callback);
            });
        }
    });
}

function delUser(user, callback) {
    adapter.getForeignObject("system.user." + user, function (err, obj) {
        if (err || !obj) {
            if (callback) callback("User does not exist");
        } else {
            if (obj.common.dontDelete) {
                if (callback) callback("Cannot delete user, while is system user");
            } else {
                adapter.delForeignObject("system.user." + user, function (err) {
                    // Remove this user from all groups in web client
                    if (callback) callback(err);
                });
            }
        }
    });
}

function addGroup(group, desc, callback) {
    var name = group;
    if (name && name.substring(0, 1) != name.substring(0, 1).toUpperCase()) {
        name = name.substring(0, 1).toUpperCase() + name.substring(1);
    }
    group = group.substring(0, 1).toLowerCase() + group.substring(1);

    adapter.getForeignObject("system.group." + group, function (err, obj) {
        if (obj) {
            if (callback) callback("Group yet exists");
        } else {
            adapter.setForeignObject('system.group.' + group, {
                type: 'group',
                common: {
                    name:    name,
                    desc:    desc,
                    members: []
                }
            }, function (err, obj) {
                if (callback) callback(err, obj);
            });
        }
    });
}

function delGroup(group, callback) {
    adapter.getForeignObject("system.group." + group, function (err, obj) {
        if (err || !obj) {
            if (callback) callback("Group does not exist");
        } else {
            if (obj.common.dontDelete) {
                if (callback) callback("Cannot delete group, while is system group");
            } else {
                adapter.delForeignObject("system.group." + group, function (err) {
                    // Remove this group from all users in web client
                    if (callback) callback(err);
                });
            }
        }
    });
}
//settings: {
//    "port":   8080,
//    "auth":   false,
//    "secure": false,
//    "bind":   "0.0.0.0", // "::"
//    "cache":  false
//}
function initWebServer(settings) {
    var server = {
        app:       null,
        server:    null,
        io:        null,
        settings:  settings
    };

    if (settings.port) {
        var options = null;

        if (settings.secure) {
            var fs = require('fs');
            try {
                options = {
                    key:  fs.readFileSync(__dirname + '/cert/privatekey.pem'),
                    cert: fs.readFileSync(__dirname + '/cert/certificate.pem')
                };
            } catch (err) {
                adapter.log.error(err.message);
            }
            if (!options) return null;
        }
        server.app = express();
        if (settings.auth) {
            session =           require('express-session');
            cookieParser =      require('cookie-parser');
            bodyParser =        require('body-parser');
            AdapterStore =      require(__dirname + '/../../lib/session.js')(session);
            passportSocketIo =  require(__dirname + "/lib/passport.socketio.js");
            password =          require(__dirname + '/../../lib/password.js');
            passport =          require('passport');
            LocalStrategy =     require('passport-local').Strategy;
            flash =             require('connect-flash'); // TODO report error to user

            store = new AdapterStore({adapter: adapter});



            passport.use(new LocalStrategy(
                function (username, password, done) {

                    adapter.checkPassword(username, password, function (res) {
                        if (res) {
                            return done(null, username);
                        } else {
                            return done(null, false);
                        }
                    });

                }
            ));
            passport.serializeUser(function (user, done) {
                done(null, user);
            });

            passport.deserializeUser(function (user, done) {
                done(null, user);
            });

            server.app.use(cookieParser());
            server.app.use(bodyParser.urlencoded({
                extended: true
            }));
            server.app.use(bodyParser.json());
            server.app.use(session({
                secret: secret,
                saveUninitialized: true,
                resave: true,
                store:  store
            }));
            server.app.use(passport.initialize());
            server.app.use(passport.session());
            server.app.use(flash());

            server.app.post('/login',
                passport.authenticate('local', {
                    successRedirect: '/',
                    failureRedirect: '/login',
                    failureFlash: 'Invalid username or password.'
                })
            );

            server.app.get('/logout', function (req, res) {
                req.logout();
                res.redirect('/login/index.html');
            });

            // route middleware to make sure a user is logged in
            server.app.use(function (req, res, next) {
                if (req.isAuthenticated() || req.originalUrl === '/login/') return next();
                res.redirect('/login/');
            });
        } else {
            server.app.get('/login', function (req, res) {
                res.redirect('/');
            });
            server.app.get('/logout', function (req, res) {
                res.redirect('/');
            });
        }

        if (settings.cache) {
            server.app.use('/', express.static(__dirname + '/www', {maxAge: 30758400000}));
        } else {
            server.app.use('/', express.static(__dirname + '/www'));
        }

        if (settings.secure) {
            server.server = require('https').createServer(options, server.app);
        } else {
            server.server = require('http').createServer(server.app);
        }
        server.server.__server = server;
    }

    if (server.server) {
        adapter.getPort(settings.port, function (port) {
            if (port != settings.port && !adapter.config.findNextPort) {
                adapter.log.error('port ' + settings.port + ' already in use');
                process.exit(1);
            }
            server.server.listen(port);
            adapter.log.info("http" + (settings.secure ? "s" : "") + " server listening on port " + port);

            server.io = socketio.listen(server.server, (settings.bind && settings.bind != "0.0.0.0") ? settings.bind : undefined);

            if (settings.auth) {
                server.io.use(passportSocketIo.authorize({
                    passport:     passport,
                    cookieParser: cookieParser,
                    key:          userKey,             // the name of the cookie where express/connect stores its session_id
                    secret:       secret,              // the session_secret to parse the cookie
                    store:        store,               // we NEED to use a sessionstore. no memorystore please
                    success:      onAuthorizeSuccess,  // *optional* callback on success - read more below
                    fail:         onAuthorizeFail      // *optional* callback on fail/error - read more below
                }));
            }

            /*server.io.set('logger', {
             debug: function(obj) {adapter.log.debug("socket.io: " + obj)},
             info:  function(obj) {adapter.log.debug("socket.io: " + obj)} ,
             error: function(obj) {adapter.log.error("socket.io: " + obj)},
             warn:  function(obj) {adapter.log.warn("socket.io: " + obj)}
             });*/
            server.io.on('connection', initSocket);
        });
    }

    if (server.server) {
        return server;
    } else {
        return null;
    }
}

function getData() {
    adapter.log.info('requesting all states');
    adapter.getForeignStates('*', function (err, res) {
        adapter.log.info('received all states');
        states = res;
    });
    adapter.log.info('requesting all objects');
    adapter.objects.getObjectList({include_docs: true}, function (err, res) {
        adapter.log.info('received all objects');
        res = res.rows;
        objects = {};
        for (var i = 0; i < res.length; i++) {
            objects[res[i].doc._id] = res[i].doc;
        }
    });
}

// Extract user name from socket
function getUserFromSocket(socket, callback) {
    var wait = false;
    try {
        if (socket.conn.request.sessionID) {
            wait = true;
            store.get(socket.conn.request.sessionID, function (err, obj) {
                if (obj && obj.passport && obj.passport.user) {
                    if (callback) callback(null, obj.passport.user);
                    return;
                }
            });
        }
    } catch (e) {

    }
    if (!wait && callback) callback("Cannot detect user");
}

function initSocket(socket) {
    if (adapter.config.auth) {
        getUserFromSocket(socket, function (err, user) {
            if (err || !user) {
                adapter.log.error('socket.io ' + err);
                return;
            } else {
                adapter.log.debug('socket.io client ' + user + ' connected');
                socketEvents(socket, user);
            }
        });
    } else {
        socketEvents(socket);
    }
}

function socketEvents(socket, user) {

    // TODO Check if user may create and delete objects and so on

    socket.on('getStates', function (callback) {
        callback(null, states);
    });

    socket.on('getObjects', function (callback) {
        callback(null, objects);
    });

    socket.on('setState', function (id, state, callback) {
        if (typeof state !== 'object') state = {val: state};
        adapter.setForeignState(id, state, function (err, res) {
            if (typeof callback === 'function') callback(err, res);
        });
    });

    socket.on('addUser', function (user, pass, callback) {
        addUser(user, pass, callback);
    });

    socket.on('delUser', function (user, callback) {
        delUser(user, callback);
    });

    socket.on('addGroup', function (group, desc, callback) {
        addGroup(group, desc, callback);
    });

    socket.on('delGroup', function (group, callback) {
        delGroup(group, callback);
    });

    socket.on('changePassword', function (user, pass, callback) {
        adapter.setPassword(user, pass, callback);
    });

    socket.on('extendObject', function (id, obj, callback) {
        adapter.extendForeignObject(id, obj, function (err, res) {
            if (typeof callback === 'function') callback(err, res);
        });
    });
}

function onAuthorizeSuccess(data, accept) {
    adapter.log.info('successful connection to socket.io from ' + data.connection.remoteAddress);
    //adapter.log.info(JSON.stringify(data));

    accept();
}


function onAuthorizeFail(data, message, error, accept) {
    if (error) adapter.log.error('failed connection to socket.io from ' + data.connection.remoteAddress + ':', message);

    if (error) {
        accept(new Error(message));
    } else {
        accept('failed connection to socket.io: ' + message);//null, false);
    }
    // this error will be sent to the user as a special error-package
    // see: http://socket.io/docs/client-api/#socket > error-object
}
